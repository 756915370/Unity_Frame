//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaLoadResesWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaLoadReses), typeof(System.Object));
		L.RegFunction("GetResources", GetResources);
		L.RegFunction("UnLoadResObj", UnLoadResObj);
		L.RegFunction("UnLoadBundleObjs", UnLoadBundleObjs);
		L.RegFunction("UnLoadSingleBundle", UnLoadSingleBundle);
		L.RegFunction("UnLoadBundleAndObjs", UnLoadBundleAndObjs);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.RegVar("LuaCallBackManager", get_LuaCallBackManager, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetResources(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			LuaLoadReses obj = (LuaLoadReses)ToLua.CheckObject<LuaLoadReses>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			LuaFunction arg4 = ToLua.CheckLuaFunction(L, 6);
			obj.GetResources(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadResObj(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			LuaLoadReses obj = (LuaLoadReses)ToLua.CheckObject<LuaLoadReses>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			obj.UnLoadResObj(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadBundleObjs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaLoadReses obj = (LuaLoadReses)ToLua.CheckObject<LuaLoadReses>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.UnLoadBundleObjs(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadSingleBundle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaLoadReses obj = (LuaLoadReses)ToLua.CheckObject<LuaLoadReses>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.UnLoadSingleBundle(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnLoadBundleAndObjs(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			LuaLoadReses obj = (LuaLoadReses)ToLua.CheckObject<LuaLoadReses>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.UnLoadBundleAndObjs(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, LuaLoadReses.Instance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LuaCallBackManager(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			LuaLoadReses obj = (LuaLoadReses)o;
			LuaCallBackManager ret = obj.LuaCallBackManager;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index LuaCallBackManager on a nil value");
		}
	}
}

